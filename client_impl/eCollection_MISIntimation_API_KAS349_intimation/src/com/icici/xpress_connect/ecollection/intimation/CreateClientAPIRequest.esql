BROKER SCHEMA com.icici.xpress_connect.ecollection.intimation
PATH com.icici.xpress_connect.common.api, com.icici.xpress_connect.ecollection.intimation.gen;


DECLARE OPTIMIZE_FOR_UNIFIED_API EXTERNAL BOOLEAN FALSE;
-- DECLARE ENABLE_DEBUG_MODE EXTERNAL BOOLEAN FALSE;

-- [24-Jan-2020]: Retry / Redelivery Default / Constants.
DECLARE NO_REDELIVERY_RULE												CONSTANT CHARACTER 		'redelivery-none'; 							-- default: None.
DECLARE DEFAULT_REDELIVERY_INTERVAL							CONSTANT INTEGER 				600;								-- default: 10 mins;
DECLARE FOREVER_REDELIVERY_COUNT_MAX 					CONSTANT INTEGER 				-1;								-- default: forever.
DECLARE UNRELEASED_APPLICATION_VERSION_TAG	 	CONSTANT CHARACTER 		'UNRELEASED';		-- default: Version Unrealeased
DECLARE DEFAULT_REDELIVERY_BLOCK_START_TIME 	CONSTANT CHARACTER 		'22:00:00';					-- default: 10 PM
DECLARE DEFAULT_REDELIVERY_BLOCK_END_TIME 		CONSTANT CHARACTER 		'08:00:00';					-- default: 8 AM

-- [24-Jan-2020]: Retry / Redelivery Configuration Parameters.
DECLARE REDELIVERY_RULE_NAME 										EXTERNAL 	CHARACTER 		NO_REDELIVERY_RULE;
-- [24-Jan-2020]: REDELIVERY_INTERVAL deprecates API_MANAGED_RETRY_AFTER_INTERVAL_SECONDS
DECLARE REDELIVERY_INTERVAL 											EXTERNAL 	INTEGER 				DEFAULT_REDELIVERY_INTERVAL;		
-- TODO: Not accepting constant FOREVER_REDELIVERY_COUNT_MAX
DECLARE REDELIVERY_COUNT_MAX 										EXTERNAL 	INTEGER 				-1;
DECLARE REDELIVERY_BLOCK_START_TIME 						EXTERNAL 	CHARACTER 		NULL;
DECLARE REDELIVERY_BLOCK_END_TIME 							EXTERNAL 	CHARACTER 		NULL;
DECLARE FALLBACK_REDELIVERY_RULE_NAME 				EXTERNAL 	CHARACTER 		NO_REDELIVERY_RULE;

-- [08-Jun-2020]: Using Policies [Redelivery]. If policy namespace and name are configured in the .bar file, the redelivery properties will be ignored.
DECLARE REDELIVERY_POLICY_NAMESPACE 						EXTERNAL 	CHARACTER 		NULL;
DECLARE REDELIVERY_POLICY_NAME 									EXTERNAL 	CHARACTER 		NULL;

-- [24-Jan-2020]: 
DECLARE APPLICATION_VERSION_TAG									EXTERNAL 	CHARACTER  		UNRELEASED_APPLICATION_VERSION_TAG;

-- [14-Feb-2020]: Redelivery management optimization.
--	User Agent  (Type: String)*
-- Example: eCollection/<Client-Code>/<Version ID> 
DECLARE 	IXC_USER_AGENT 														CONSTANT CHARACTER 		'IXC-User-Agent';

--	# Integration Applications (API implementations on IBM ACE) will disallow operations that the client 
--	# does not have a valid subscription for. The "disallow" part is implemented through externalized
-- # configuration parameters INTIMATION_API_SUBSCRIPTION and REFUND_INTIMATION_API_SUBSCRIPTION

-- We have a API request / response boilerplate handler. 
-- Hence both the application (business scenarios) have been defined in the same ESQL.
--DECLARE INTIMATION_API_SUBSCRIPTION 							EXTERNAL BOOLEAN TRUE;					-- default value.
--DECLARE REFUND_INTIMATION_API_SUBSCRIPTION 		EXTERNAL BOOLEAN FALSE;				-- default value.

DECLARE ERROR_TERMINAL 															CONSTANT CHARACTER 		'out1';
-- [06-May-2020]: REST XML and SOAP Web Services.
DECLARE SUCCESS_TERMINAL_REST 											CONSTANT CHARACTER 		'out';
DECLARE SUCCESS_TERMINAL_WS												CONSTANT CHARACTER 		'out2';

-- TODO: Below constants are also declared in the CommonAPIMessageBuilder.esql shared library component.
-- Need to check if these can be defined in only one place and referenced from the rest of the application.
-- Currently these constants are being duplicated for the deployment to succeed.

-- [06-May-2020]: REST XML and SOAP Web Services.
-- 	Field Name changes.
DECLARE CONTENT_TYPE_MIME_JSON 										CONSTANT CHARACTER 		'application/json';
DECLARE CONTENT_TYPE_MIME_XML 										CONSTANT CHARACTER 		'application/xml';
DECLARE CONTENT_TYPE_MIME_SOAP_1_1 								CONSTANT CHARACTER 		'text/xml';
DECLARE CONTENT_TYPE_MIME_SOAP_1_2 								CONSTANT CHARACTER 		'application/soap+xml';

-- [06-May-2020]: REST XML and SOAP Web Services.
-- 	Field Name changes.
DECLARE API_TYPE_REST_JSON 														CONSTANT CHARACTER 		'REST-JSON/HTTP';
DECLARE API_TYPE_REST_XML 														CONSTANT CHARACTER 		'REST-XML/HTTP';
DECLARE API_TYPE_WS_SOAP_V11 												CONSTANT CHARACTER 		'WS-SOAP1.1/HTTP';
DECLARE API_TYPE_WS_SOAP_V12 												CONSTANT CHARACTER 		'WS-SOAP1.2/HTTP';

-- [06-May-2020]: REST XML and SOAP Web Services.
-- 	Constant field refactored.
-- @@IXC.OverrideConfigurationParameter
DECLARE CLIENT_API_TYPE 															EXTERNAL CHARACTER  		API_TYPE_REST_JSON;

-- [06-May-2020]: REST XML and SOAP Web Services.
-- Web Services Properties.
DECLARE 	CLIENT_API_MESSAGE_REQUEST_ROOT 					EXTERNAL CHARACTER 		NULL;
DECLARE	CLIENT_API_REQUEST_NAMESPACE 						EXTERNAL CHARACTER 		NULL;

DECLARE 	CLIENT_API_MESSAGE_RESPONSE_ROOT 				EXTERNAL CHARACTER 		NULL;
DECLARE	CLIENT_API_RESPONSE_NAMESPACE 						EXTERNAL CHARACTER 		NULL;

-- [30-Aug-2020]
DECLARE 	CLIENT_API_MESSAGE_REQUEST_ROOT_SECURE 		EXTERNAL CHARACTER 		NULL;
DECLARE	CLIENT_API_REQUEST_NAMESPACE_SECURE 				EXTERNAL CHARACTER 		NULL;
DECLARE 	CLIENT_API_MESSAGE_RESPONSE_ROOT_SECURE 		EXTERNAL CHARACTER 		NULL;
DECLARE	CLIENT_API_RESPONSE_NAMESPACE_SECURE 			EXTERNAL CHARACTER 		NULL;

DECLARE WS_SOAP_CTX_OPERATION_NAME 							EXTERNAL CHARACTER 		NULL;
DECLARE WS_SOAP_CTX_PORT_TYPE 											EXTERNAL CHARACTER 		NULL;
DECLARE WS_SOAP_CTX_PORT_NAME 										EXTERNAL CHARACTER 		NULL;
DECLARE WS_SOAP_CTX_SERVICE_NAME 									EXTERNAL CHARACTER 		NULL;
DECLARE WS_SOAP_CTX_NAMESPACE_PREFIX 						EXTERNAL CHARACTER 		NULL;
DECLARE WS_SOAP_CTX_XML_DECLARATION 						EXTERNAL CHARACTER 		NULL;
DECLARE WS_SOAP_HTTP_HDR_SOAPACTION						EXTERNAL CHARACTER 		NULL;

DECLARE NS_SOAP_V11 																	NAMESPACE 		'http://schemas.xmlsoap.org/soap/envelope/';
DECLARE NS_SOAP_V12 																	NAMESPACE 		'http://www.w3.org/2003/05/soap-envelope';

DECLARE API_COMPLETION_CODE_SUCCESSFUL 					CONSTANT INTEGER 		0;
DECLARE API_COMPLETION_CODE_WARNING 						CONSTANT INTEGER 		1;
DECLARE API_COMPLETION_CODE_ERROR 								CONSTANT INTEGER 		2;

DECLARE API_REASON_CODE_UNKNOWN 													CONSTANT CHARACTER 		'XC000201';
DECLARE API_REASON_CODE_OK 																	CONSTANT CHARACTER 		'XC000202';
DECLARE API_REASON_CODE_UNSUPPORTED_API_VERSION 				CONSTANT CHARACTER 		'XC00001E';
DECLARE API_REASON_CODE_REQUEST_ID_NOT_FOUND 						CONSTANT CHARACTER 		'XC00002E';
DECLARE API_REASON_CODE_REQUEST_DATETIME_NOT_FOUND 		CONSTANT CHARACTER 		'XC00003E';
DECLARE API_REASON_CODE_PRIORITY_CODE_NOT_VALID 				CONSTANT CHARACTER 		'XC00004E';
DECLARE API_REASON_CODE_RESENT_INDICATOR_INCONSISTENT CONSTANT CHARACTER 		'XC00005E';
DECLARE API_REASON_CODE_REQUEST_NOT_VALID 								CONSTANT CHARACTER 		'XC00101E';
DECLARE API_REASON_CODE_RESPONSE_NOT_VALID 							CONSTANT CHARACTER 		'XC00102E';

DECLARE API_REASON_CODE_API_VERSION_MISMATCH 						CONSTANT CHARACTER 		'XC00031E';
DECLARE API_REASON_CODE_REQUEST_ID_MISMATCH 						CONSTANT CHARACTER 		'XC00032E';
DECLARE API_REASON_CODE_REQUEST_DATETIME_MISMATCH 		CONSTANT CHARACTER 		'XC00033E';
DECLARE API_REASON_CODE_PRIORITY_CODE_MISMATCH 					CONSTANT CHARACTER 		'XC00034E';
DECLARE API_REASON_CODE_RESENT_INDICATOR_MISMATCH 		CONSTANT CHARACTER 		'XC00035E';

DECLARE API_REASON_CODE_COMMUNICATION_ERROR 						CONSTANT CHARACTER 		'XC00091E';
DECLARE API_REASON_CODE_CLIENT_SERVICE_TIMEOUT_ERROR 		CONSTANT CHARACTER 		'XC0092E';
DECLARE API_REASON_CODE_CLIENT_SERVICE_UNAVAILABLE_ERROR CONSTANT CHARACTER 'XC0093E';

DECLARE API_REASON_CODE_REQUEST_ACCEPTED 								CONSTANT CHARACTER 		'XC00203I';
DECLARE API_REASON_CODE_OBJECT_CREATED 										CONSTANT CHARACTER 		'XC00204I';

DECLARE API_REASON_MESSAGE_REQUEST_ACCEPTED 							CONSTANT CHARACTER 		'Request accepted.';
DECLARE API_REASON_MESSAGE_OBJECT_CREATED 								CONSTANT CHARACTER 		'Resource created.';

-- [05-Sep-2020]
DECLARE API_REASON_CODE_RESPONSE_INCONSISTENT 						CONSTANT CHARACTER 		'XC00503E';

-- HTTP Status Codes.
DECLARE API_HTTP_STATUS_CODE_OK 									 					CONSTANT INTEGER 		200;
DECLARE API_HTTP_STATUS_CODE_CREATED  					 					CONSTANT INTEGER 		201;
DECLARE API_HTTP_STATUS_CODE_ACCEPTED  					 					CONSTANT INTEGER 		202;
DECLARE API_HTTP_STATUS_CODE_NOT_MODIFIED 		 					CONSTANT INTEGER 		304;
DECLARE API_HTTP_STATUS_CODE_BAD_REQUEST 			 					CONSTANT INTEGER 		400;
DECLARE API_HTTP_STATUS_CODE_UNAUTHORIZED 		 					CONSTANT INTEGER 		401;
DECLARE API_HTTP_STATUS_CODE_REQUEST_TIMEOUT  					CONSTANT INTEGER 		408;
DECLARE API_HTTP_STATUS_CODE_INTERNAL_SERVER_ERROR 		CONSTANT INTEGER 		500;
DECLARE API_HTTP_STATUS_CODE_BAD_GATEWAY 							CONSTANT INTEGER 		502;
DECLARE API_HTTP_STATUS_CODE_SERVICE_UNAVAILABLE 			CONSTANT INTEGER 		503;
DECLARE API_HTTP_STATUS_CODE_GATEWAY_TIMEOUT 					CONSTANT INTEGER 		504;
DECLARE API_HTTP_STATUS_CODE_MULTI_STATUS 							CONSTANT INTEGER 		207;
-- Used for plugging in Reason Code to HTTP Status Code where reason codes are customer defined (extended).
DECLARE API_HTTP_STATUS_CODE_UNKNOWN 									CONSTANT INTEGER 		-1;
-- [20-Jan-2020]
DECLARE API_HTTP_STATUS_CODE_FORBIDDEN 									CONSTANT INTEGER 		403;

-- ********** ********** ********** ********** ********** ********** ********** ********** ********** ********** ********** ********** ********** ********** 
-- [12-Jun-2020]: Client API Authentication.
-- ********** ********** ********** ********** ********** ********** ********** ********** ********** ********** ********** ********** ********** ********** 
-- Valid Values: Basic-Auth, WSSE-UserNameToken
-- 	Basic-Auth: User Name and Password are set in the HTTP Header for the HTTP requests sent to the client. 
-- WSSE-UserNameToken: User Name and Password are set in the SOAP Header for the SOAP / HTTP requests sent to the client.

DECLARE CLIENT_API_AUTH_TYPE															EXTERNAL CHARACTER NULL;

DECLARE API_AUTH_TYPE_BASIC_AUTH												CONSTANT CHARACTER 'Basic-Auth';
DECLARE API_AUTH_TYPE_WSSE_BASIC_AUTH									CONSTANT CHARACTER 'WSSE-UserNameToken';

-- Option 1: Configure within the .bar file.
DECLARE CLIENT_API_AUTH_IDENTITY_TOKEN									EXTERNAL CHARACTER NULL;		-- Username 
DECLARE CLIENT_API_AUTH_IDENTITY_PWD										EXTERNAL CHARACTER NULL;		-- Password
DECLARE	CLIENT_API_AUTH_DOMAIN													EXTERNAL CHARACTER NULL;		-- Authorization Domain

-- Option 2: Configure using mqsivault and mqsicredentials (IBM ACE 11.0.0.6+) or mqsisetdbparms
-- Authenticating incoming requests by using credentials stored in the vault.
-- https://www.ibm.com/support/knowledgecenter/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bp28500_.html
DECLARE CLIENT_API_AUTH_POLICY_NAMESPACE							EXTERNAL CHARACTER NULL;		-- Policy Project name (not .bar file name or policy XML file name).
DECLARE CLIENT_API_AUTH_POLICY_NAME										EXTERNAL CHARACTER NULL;		-- Policy Name (not the policy XML file name). 

-- ********** ********** ********** ********** ********** ********** ********** ********** ********** ********** ********** ********** ********** ********** 

-- ********** ********** ********** ********** ********** ********** ********** ********** ********** ********** ********** ********** ********** ********** 
-- [03-Jul-2020]: Message security (Checksum / Hashing & Encryption)
-- ********** ********** ********** ********** ********** ********** ********** ********** ********** ********** ********** ********** ********** ********** 
--		DECLARE IXC_SECURE_MESSAGE_HASHING_TYPE											CONSTANT CHARACTER 	'IXC-Secure-Message-Hashing-Type';
--		DECLARE IXC_SECURE_MESSAGE_HASHING_ALGO 										CONSTANT CHARACTER 	'IXC-Secure-Message-Hashing-Algo';
--		DECLARE IXC_SECURE_MESSAGE_ENCRYPTION_TYPE									CONSTANT CHARACTER 	'IXC-Secure-Message-Hashing-Type';
--		DECLARE IXC_SECURE_MESSAGE_ENCRYPTION_CIPHER_PAYLOAD 		CONSTANT CHARACTER 	'IXC-Secure-Message-Encryption-Cipher-Payload';
--		DECLARE IXC_SECURE_MESSAGE_ENCRYPTION_CIPHER_KEY 					CONSTANT CHARACTER 	'IXC-Secure-Message-Encryption-Cipher-Key';

-- [03-Jul-2020]: Message security (Checksum / Hashing & Encryption)
DECLARE soapEnv11 			NAMESPACE 'http://schemas.xmlsoap.org/soap/envelope/';
DECLARE soapEnv12 			NAMESPACE 'http://www.w3.org/2003/05/soap-envelope';

-- Constants 
DECLARE MESSAGE_SECURITY_TYPE_MESSAGE_HASHING												CONSTANT CHARACTER 	'Message-Hashing';
DECLARE MESSAGE_SECURITY_TYPE_XML_SIGNATURE													CONSTANT CHARACTER 	'WSSE-XMLSignature';

DECLARE MESSAGE_SECURITY_TYPE_MESSAGE_ENCRYPTION										CONSTANT CHARACTER 	'Message-Encryption';
DECLARE MESSAGE_SECURITY_TYPE_MESSAGE_ENCRYPTION_FIELDS_ONLY			CONSTANT CHARACTER 	'Message-Encryption-FieldsOnly';
DECLARE MESSAGE_SECURITY_TYPE_XML_ENCRYPTION													CONSTANT CHARACTER 	'WSSE-XMLEncryption';

-- True if message needs to be secured through hashing and /or encryption.
DECLARE CLIENT_API_MESSAGE_SECURITY_INDICATOR											EXTERNAL BOOLEAN FALSE;
-- 	Valid Values:	 Message-Hashing, WSSE-XMLSignature 
DECLARE CLIENT_API_MESSAGE_SECURITY_HASHING_TYPE								EXTERNAL CHARACTER NULL;
-- 	Valid Values:	 Message-Encyption-FieldsOnly, Message-Encryption,  WSSE-XMLEncryption
DECLARE CLIENT_API_MESSAGE_SECURITY_ENCRYPTION_TYPE 							EXTERNAL CHARACTER NULL;
-- [02-Aug-2020]: Message security (Checksum / Hashing & Encryption): Response Validation
DECLARE CLIENT_API_MESSAGE_SECURITY_RESPONSE_CHECK 							EXTERNAL BOOLEAN FALSE;


-- 	// Message Digest Algo:
--	// https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#MessageDigest
--	// 		MD2
--	//	    MD5
--	//	    SHA-1
--	//	    SHA-256
--	// 		SHA-384
--	// 		SHA-512
DECLARE CLIENT_API_MESSAGE_SECURITY_HASHING_ALGO														EXTERNAL CHARACTER NULL;

-- Encryption 
DECLARE CLIENT_API_MESSAGE_SECURITY_ENCRYPTION_ALGO												EXTERNAL CHARACTER NULL;
DECLARE CLIENT_API_MESSAGE_SECURITY_ENCRYPTION_ALGO_MODE 								EXTERNAL CHARACTER NULL;
DECLARE CLIENT_API_MESSAGE_SECURITY_ENCRYPTION_ALGO_PADDING 							EXTERNAL CHARACTER NULL;
DECLARE CLIENT_API_MESSAGE_SECURITY_ENCRYPTION_ALGO_CUSTOM_PADDING 		EXTERNAL CHARACTER NULL;  -- Used when Algo Padding is "NoPadding".

DECLARE CLIENT_API_MESSAGE_SECURITY_ENCRYPTION_SECRET_KEYGEN							EXTERNAL CHARACTER 'STATIC';
DECLARE CLIENT_API_MESSAGE_SECURITY_ENCRYPTION_SECRET_KEYSIZE							EXTERNAL INTEGER 0;

DECLARE CLIENT_API_MESSAGE_SECURITY_ENCRYPTION_ENCODING										EXTERNAL CHARACTER 'BASE64';

-- Applicable for Message-Encryption: Will have customer's RSA PUBLIC key certifcate. This case is when the customer uploads their keystore on portal.
DECLARE CLIENT_API_MESSAGE_SECURITY_SECRETKEY_ENCRYPTION_ALGO													EXTERNAL CHARACTER NULL;
DECLARE CLIENT_API_MESSAGE_SECURITY_SECRETKEY_ENCRYPTION_ALGO_MODE 									EXTERNAL CHARACTER NULL;
DECLARE CLIENT_API_MESSAGE_SECURITY_SECRETKEY_ENCRYPTION_ALGO_PADDING 							EXTERNAL CHARACTER NULL;
DECLARE CLIENT_API_MESSAGE_SECURITY_SECRETKEY_ENCRYPTION_ALGO_CUSTOM_PADDING 		EXTERNAL CHARACTER NULL;  -- Used when Algo Padding is "NoPadding".


-- Key Store: RSA (Symmetric) PUBLIC key cert for field level encryption and 
-- AES / DES / 3DES SHARED SECRET key for entire payload encryption.
DECLARE CLIENT_API_MESSAGE_SECURITY_KEYSTORE_TYPE													EXTERNAL CHARACTER NULL;
DECLARE CLIENT_API_MESSAGE_SECURITY_KEYSTORE_NAME												EXTERNAL CHARACTER NULL;
DECLARE CLIENT_API_MESSAGE_SECURITY_KEYSTORE_PATH													EXTERNAL CHARACTER NULL;
DECLARE CLIENT_API_MESSAGE_SECURITY_KEYSTORE_PASSWORD 										EXTERNAL CHARACTER NULL;

DECLARE CLIENT_API_MESSAGE_SECURITY_PUBLIC_KEY_PASSWORD 									EXTERNAL CHARACTER NULL;		
DECLARE CLIENT_API_MESSAGE_SECURITY_PUBLIC_KEY_ALIAS_NAME 								EXTERNAL CHARACTER NULL;		-- Customer's public key to encrypt.

DECLARE CLIENT_API_MESSAGE_SECURITY_PRIVATE_KEY_PASSWORD 								EXTERNAL CHARACTER NULL;
DECLARE CLIENT_API_MESSAGE_SECURITY_PRIVATE_KEY_ALIAS_NAME 							EXTERNAL CHARACTER NULL;		-- iXC private key to decrypt or to sign in case of XML Signature.

-- Key Store: RSA/DSA (Symmetric) PUBLIC key cert for encrypting SECRET key if auto-generated (RUNTIME)
DECLARE CLIENT_API_MESSAGE_SECURITY_SECRET_KEYSTORE_TYPE							EXTERNAL CHARACTER NULL;
DECLARE CLIENT_API_MESSAGE_SECURITY_SECRET_KEYSTORE_NAME						EXTERNAL CHARACTER NULL;
DECLARE CLIENT_API_MESSAGE_SECURITY_SECRET_KEYSTORE_PATH						EXTERNAL CHARACTER NULL;
DECLARE CLIENT_API_MESSAGE_SECURITY_SECRET_KEYSTORE_PASSWORD 			EXTERNAL CHARACTER NULL;

DECLARE CLIENT_API_MESSAGE_SECURITY_SECRET_KEY_PASSWORD 						EXTERNAL CHARACTER NULL;
DECLARE CLIENT_API_MESSAGE_SECURITY_SECRET_KEY_ALIAS_NAME 					EXTERNAL CHARACTER NULL;

-- Defaults
DECLARE DEFAULT_MESSAGE_SECURITY_KEYSTORE_TYPE					EXTERNAL CHARACTER 'pkcs12';
DECLARE DEFAULT_MESSAGE_SECURITY_KEYSTORE_NAME				EXTERNAL CHARACTER '.keystore';
DECLARE DEFAULT_MESSAGE_SECURITY_KEYSTORE_PATH					EXTERNAL CHARACTER '/home/aceuser/';

-- Related to XML Signature
--		"MD5withRSA",
--	 	"SHA1withRSA",					// RSAwithSHA1 												http://www.w3.org/2000/09/xmldsig#rsa-sha1
--	 	"SHA256withRSA",				// RSAwithSHA256 											http://www.w3.org/2001/04/xmldsig-more#rsa-sha256 [RFC6931]
--	 	"SHA384withRSA",
--	  	"SHA512withRSA",				// RSAwithSHA512 											http://www.w3.org/2001/04/xmldsig-more#rsa-sha512
--		"SHA1withDSA",					// DSAwithSHA1 (signature verification) 	http://www.w3.org/2000/09/xmldsig#dsa-sha1 [RFC6931]		
-- 														// "SHA1withDSA": Key length issue. Bug in JDK 8. Key length is 2048 but still considers it as 1024 causing the exception. 
-- 														// Hence using Bouncy Castle.
--		"SHA256withDSA",				// DSAwithSHA256 											http://www.w3.org/2009/xmldsig11#dsa-sha256
--		"SHA384withDSA",				// JDK8 Limitation. No Such Algorithm Exception. Hence using Bouncy Castle.
--		"SHA512withDSA" 				// JDK8 Limitation. No Such Algorithm Exception. Hence using Bouncy Castle.
DECLARE CLIENT_API_MESSAGE_SECURITY_XMLDSIG_SIGNATURE							EXTERNAL CHARACTER NULL;

DECLARE CLIENT_API_MESSAGE_SECURITY_XMLDSIG_DIGEST										EXTERNAL CHARACTER NULL;		-- MD5, SHA-1, SHA-256, SHA-512
DECLARE CLIENT_API_MESSAGE_SECURITY_XMLDSIG_ENCODING								EXTERNAL CHARACTER NULL;
DECLARE CLIENT_API_MESSAGE_SECURITY_XMLDSIG_MAC											EXTERNAL CHARACTER NULL;

DECLARE CLIENT_API_MESSAGE_SECURITY_XMLDSIG_CANONICALIZATION  EXTERNAL CHARACTER  'http://www.w3.org/2001/10/xml-exc-c14n#'; -- XML_DSIG_CANONICAL_METHOD_C14N1_EXCLUSIVE

DECLARE CLIENT_API_MESSAGE_SECURITY_XMLDSIG_TRANSFORM							EXTERNAL CHARACTER 
			 							'http://www.w3.org/2010/xmldsig2#transform';  							-- XML_DSIG_TRANSFORM_XMLSIGN20
			 							
-- XML Fragment / Document selection
DECLARE CLIENT_API_MESSAGE_SECURITY_XMLDSIG_SELECTION								EXTERNAL CHARACTER  'XML-Document-Fragment';

-- ********** ********** ********** ********** ********** ********** ********** ********** ********** ********** ********** ********** ********** ********** 

	DECLARE API_SUBSCRIPTION EXTERNAL BOOLEAN FALSE;							-- default value.
	-- [15-Jan-2020]: 
	DECLARE API_SUBSCRIPTION_CLIENT_CODE EXTERNAL CHARACTER '';	-- default value.

DECLARE CLIENT_ORGANIZATION_ID 			EXTERNAL 		CHARACTER '';
DECLARE CLIENT_ORGANIZATION_NAME 	EXTERNAL 		CHARACTER '';

DECLARE IXC_API_TEST_INDICATOR 				CONSTANT 	CHARACTER 'IXC-DevOps-Test-Indicator';
DECLARE IXC_API_TEST_RUN_ID 						CONSTANT 	CHARACTER 'IXC-DevOps-Test-Run-Id';
DECLARE IXC_API_TEST_SAMPLE_ID 				CONSTANT 	CHARACTER 'IXC-DevOps-Test-Sample-Id';

CREATE COMPUTE MODULE CreateClientAPIRequest


	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
	
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();

		-- Set message headers.
		SET OutputRoot.Properties.CodedCharSetId = InputRoot.Properties.CodedCharSetId;
		SET OutputRoot.Properties.Encoding = InputRoot.Properties.Encoding;

		-- [06-May-2020]: REST XML and SOAP Web Services.
		-- Moved this to a new function.
		--		-- Content-Type depends upon the target (Client) service.
		--		SET OutputRoot.Properties.ContentType = CLIENT_API_REQUEST_CONTENT_TYPE_MIME;
		--
		--		-- Set HTTP Headers.
		--		-- HTTP Headers depend upon the target (Client) service.
		--		SET OutputRoot.HTTPRequestHeader."Content-Type" 			= CLIENT_API_REQUEST_CONTENT_TYPE_MIME;
		--		-- SET OutputRoot.HTTPRequestHeader."Content-Encoding" 	= 'UTF-8';
		--		SET OutputRoot.HTTPRequestHeader."Accept" 						= CLIENT_API_REQUEST_CONTENT_TYPE_MIME;
		--
		
		CREATE FIELD OutputRoot.HTTPRequestHeader;

		-- Set up the Redelivery Configuration in case this request ends up failing.
		CALL buildRedeliveryConfiguration();	

		-- CALL CopyEntireMessage();
		-- Map API request to target / client API request.
		DECLARE refAPIRequest REFERENCE TO InputRoot.JSON.Data;
		
		-- [12-Jun-2020]: Curate important fields for transaction identification / tracking.
		CALL inkTransaction(refAPIRequest, InputRoot.HTTPInputHeader);
		
		CREATE FIELD OutputRoot.JSON.Data IDENTITY(JSON.Object) Data;
		
		DECLARE refAPIResponse REFERENCE TO OutputRoot.JSON.Data;
		DECLARE chClientCode CHARACTER COALESCE(refAPIRequest.client_code, '');
		

		-- [10-Jan-2020]:  API subscription validation. If not valid, return an HTTP Status Code 403 (Forbidden).
		IF NOT (API_SUBSCRIPTION AND 
			chClientCode = API_SUBSCRIPTION_CLIENT_CODE) THEN
			CALL com.icici.xpress_connect.common.api.buildAPIRequestForbiddenResponse(refAPIRequest, refAPIResponse);

			-- Set the HTTP Status Code.
			SET OutputLocalEnvironment.Destination.HTTP.ReplyStatusCode = API_HTTP_STATUS_CODE_FORBIDDEN;
			-- [20-Jan-2020]
			--		com.icici.xpress_connect.ecollection.intimation.gen.mapHTTPStatusCode(refAPIResponse.reason_code);

			-- [06-May-2020]: REST XML and SOAP Web Services.
			-- HTTP response headers for content-type.
			CALL addHTTPResponseHeaders();
			
			PROPAGATE TO TERMINAL ERROR_TERMINAL;
			RETURN FALSE;
		END IF;	
		
		-- Preserve the request received from the sender (ICICI system / application).
		-- Used during the client response assertion if the client has adopted our API 
		-- (the one we expose to the ICICI systems / applications).
		CREATE LASTCHILD OF Environment.Variables.eCollection.API.Request DOMAIN ('JSON') NAME 'Message';
		SET Environment.Variables.eCollection.API.Request.Message = refAPIRequest;

		-- Validation results collector.
		CREATE FIELD Environment.Variables.eCollection.API.Request.ValidationResult;
		DECLARE refAPIValidationReport REFERENCE TO Environment.Variables.eCollection.API.Request.ValidationResult;
		
		-- [15-Jan-2020]: Validation-Departure:  Pre-hygiene checks.  
		-- TODO: None for now.
		
		-- API validation check.
		-- [15-Feb-2020]: Checking datatypes is moot when the values conform to the original datatypes.
		-- Example: A priority value of 3 (integer) or "3" (string) does not have any impact on the validation even if XMLNSC validation is used.
		-- Explicit type casting and converting the values to their downgraded types is the way ahead.
		CALL performBaseAPIRequestValidation_Downgrade(refAPIRequest, refAPIValidationReport);
		
		-- Common hygience check.
		CALL com.icici.xpress_connect.common.api.performBaseAPIRequestValidation(refAPIRequest, refAPIValidationReport);

		IF com.icici.xpress_connect.common.api.hasValidationFailed(refAPIValidationReport) THEN
			-- Validation failure.
			-- Prepare API error response.
			-- CREATE FIELD OutputRoot.JSON.Data;
			CREATE FIELD OutputRoot.JSON.Data IDENTITY(JSON.Object) Data;
			DECLARE refAPIResponse REFERENCE TO OutputRoot.JSON.Data;
			
			CALL com.icici.xpress_connect.common.api.prepareErrorResponse(refAPIRequest, refAPIResponse, 
				refAPIValidationReport.completion_code, API_REASON_CODE_REQUEST_NOT_VALID, 
				TRUE);

			-- Set the HTTP Status Code. 
			SET OutputLocalEnvironment.Destination.HTTP.ReplyStatusCode = API_HTTP_STATUS_CODE_BAD_REQUEST;
			-- [20-Jan-2020]
			-- com.icici.xpress_connect.ecollection.intimation.gen.mapHTTPStatusCode(refAPIResponse.reason_code);	
			
			-- [06-May-2020]: REST XML and SOAP Web Services.
			-- HTTP response headers for content-type.
			CALL addHTTPResponseHeaders();

			-- Return failure response.
			PROPAGATE TO TERMINAL ERROR_TERMINAL;
			RETURN FALSE;
			
		ELSE
			-- Clear the earlier validation results.
--			DELETE FIELD refAPIValidationReport;
--			CREATE FIELD Environment.Variables.eCollection.API.Request.ValidationResult;
--			SET refAPIValidationReport = Environment.Variables.eCollection.API.Request.ValidationResult;
			
			SET refAPIValidationReport VALUE = NULL;
			 
			-- Hygiene checks cleared. We now perform business data validations.
			CALL performBusinessDataValidation(refAPIRequest, refAPIValidationReport);

		END IF;

		IF com.icici.xpress_connect.common.api.hasValidationFailed(refAPIValidationReport)  THEN
			-- Validation failure.
			-- Prepare API error response.
			-- CREATE FIELD OutputRoot.JSON.Data;
			CREATE FIELD OutputRoot.JSON.Data IDENTITY(JSON.Object) Data;
			DECLARE refAPIResponse REFERENCE TO OutputRoot.JSON.Data;

			-- Using the first reason code in the validation report instead of a generic API_REASON_CODE_REQUEST_NOT_VALID
			CALL com.icici.xpress_connect.common.api.prepareErrorResponse(refAPIRequest, refAPIResponse, 
				refAPIValidationReport.completion_code, refAPIValidationReport.Assertion[1].reason_code, 
				TRUE);

			-- Set the HTTP Status Code.
			SET OutputLocalEnvironment.Destination.HTTP.ReplyStatusCode = API_HTTP_STATUS_CODE_BAD_REQUEST;
			-- [20-Jan-2020]
			-- com.icici.xpress_connect.ecollection.intimation.gen.mapHTTPStatusCode(refAPIResponse.reason_code);
	
			-- [06-May-2020]: REST XML and SOAP Web Services.
			-- HTTP response headers for content-type.
			CALL addHTTPResponseHeaders();

			-- Return failure response.
			PROPAGATE TO TERMINAL ERROR_TERMINAL;
			RETURN FALSE;

		ELSE
			-- Build the client request.
			-- [06-May-2020]: REST XML and SOAP Web Services.
			-- HTTP client request headers for content-type.
			CALL addHTTPClientRequestHeaders();

			-- [15-Apr-2020]: Introduced for injecting client HTTP headers.
			DECLARE refAPIRequestHeader 			REFERENCE TO InputRoot.HTTPInputHeader;
			DECLARE refClientAPIRequestHeader 	REFERENCE TO OutputRoot.HTTPRequestHeader;
			
			IF CLIENT_API_TYPE = API_TYPE_REST_JSON THEN
				CREATE FIELD OutputRoot.JSON.Data;
				DECLARE refClientAPIRequest REFERENCE TO OutputRoot.JSON.Data;

				-- Map API request fields to client/target API fields.
				-- [15-Apr-2020]: Introduced for injecting client HTTP headers.
				CALL mapAPIRequest(refAPIRequest, refClientAPIRequest, refAPIRequestHeader, refClientAPIRequestHeader);

				-- Payload checksum or encryption.
				CALL secureAPIRequest(refAPIRequest, refClientAPIRequest, refAPIRequestHeader, refClientAPIRequestHeader);
				
			ELSEIF CLIENT_API_TYPE = API_TYPE_REST_XML THEN
				DELETE FIELD OutputRoot.JSON;
				IF COALESCE(CLIENT_API_REQUEST_NAMESPACE, '') = '' THEN	-- No Namespace
					CREATE FIELD OutputRoot.XMLNSC.{ CLIENT_API_MESSAGE_REQUEST_ROOT };
				ELSE -- Namespace
					CREATE FIELD OutputRoot.XMLNSC.{CLIENT_API_REQUEST_NAMESPACE}:{ CLIENT_API_MESSAGE_REQUEST_ROOT };
				END IF;
				
				DECLARE refClientAPIRequest REFERENCE TO OutputRoot.XMLNSC.*:{ CLIENT_API_MESSAGE_REQUEST_ROOT };
				
				-- Map API request fields to client/target API fields.
				-- [15-Apr-2020]: Introduced for injecting client HTTP headers.
				CALL mapAPIRequest(refAPIRequest, refClientAPIRequest, refAPIRequestHeader, refClientAPIRequestHeader);
				
					-- Payload checksum or encryption.
					CALL secureAPIRequest(refAPIRequest, refClientAPIRequest, refAPIRequestHeader, refClientAPIRequestHeader);

			ELSEIF 	CLIENT_API_TYPE = API_TYPE_WS_SOAP_V11 OR 
							CLIENT_API_TYPE = API_TYPE_WS_SOAP_V12 THEN
				
				DELETE FIELD OutputRoot.JSON;
--				CALL initWebServiceContext();
--
--				-- [20-Jun-2020]: Build Web Services SOAP Header.
--				CREATE FIELD OutputRoot.SOAP.Header;
--				
--				IF COALESCE(CLIENT_API_REQUEST_NAMESPACE, '') = '' THEN	-- No Namespace
--					CREATE FIELD OutputRoot.SOAP.Body.{CLIENT_API_MESSAGE_REQUEST_ROOT};
--				ELSE -- Namespace
--					CREATE FIELD OutputRoot.SOAP.Body.{CLIENT_API_REQUEST_NAMESPACE}:{CLIENT_API_MESSAGE_REQUEST_ROOT};
--				END IF;
--				
--				DECLARE refClientWSSOAPHeader REFERENCE TO OutputRoot.SOAP.Header;
--				DECLARE refClientAPIRequest REFERENCE TO OutputRoot.SOAP.Body.*:{CLIENT_API_MESSAGE_REQUEST_ROOT};

				IF CLIENT_API_TYPE = API_TYPE_WS_SOAP_V12 THEN
					SET OutputRoot.XMLNSC.soapEnv12:Envelope.(XMLNSC.NamespaceDecl) xmlns:soap12 = NS_SOAP_V12;
		
					CREATE FIELD OutputRoot.XMLNSC.soapEnv12:Envelope.soapEnv12:Header;
					CREATE FIELD OutputRoot.XMLNSC.soapEnv12:Envelope.soapEnv12:Body;
					
				ELSEIF CLIENT_API_TYPE = API_TYPE_WS_SOAP_V11 THEN
					SET OutputRoot.HTTPRequestHeader.SOAPAction = WS_SOAP_HTTP_HDR_SOAPACTION;
					SET OutputRoot.XMLNSC.soapEnv11:Envelope.(XMLNSC.NamespaceDecl) xmlns:soap11 = NS_SOAP_V11;
		
					CREATE FIELD OutputRoot.XMLNSC.soapEnv11:Envelope.soapEnv11:Header;
					CREATE FIELD OutputRoot.XMLNSC.soapEnv11:Envelope.soapEnv11:Body;
				END IF;

				IF COALESCE(CLIENT_API_REQUEST_NAMESPACE, '') = '' THEN	-- No Namespace
					CREATE FIELD OutputRoot.XMLNSC.*:Envelope.*:Body.{CLIENT_API_MESSAGE_REQUEST_ROOT};
				ELSE -- Namespace
					CREATE FIELD OutputRoot.XMLNSC.*:Envelope.*:Body.{CLIENT_API_REQUEST_NAMESPACE}:{CLIENT_API_MESSAGE_REQUEST_ROOT};
					SET OutputRoot.XMLNSC.*:Envelope.*:Body.{CLIENT_API_REQUEST_NAMESPACE}:{CLIENT_API_MESSAGE_REQUEST_ROOT}.(XMLNSC.NamespaceDecl) xmlns:clientNS 
									= CLIENT_API_REQUEST_NAMESPACE;
				END IF;
				
				DECLARE refClientWSSOAPHeader REFERENCE TO OutputRoot.XMLNSC.*:Envelope.*:Header;
				DECLARE refClientAPIRequest REFERENCE TO OutputRoot.XMLNSC.*:Envelope.*:Body.*:{CLIENT_API_MESSAGE_REQUEST_ROOT};
				
				-- Web Services Authentication.
	            CALL secureWSRequestAuthenticate(refAPIRequest, refClientAPIRequest, refClientWSSOAPHeader, refAPIRequestHeader, refClientAPIRequestHeader);
	           
				-- Map API request fields to client/target API fields.
				-- [15-Apr-2020]: Introduced for injecting client HTTP headers.
				CALL mapAPIRequest(refAPIRequest, refClientAPIRequest, refAPIRequestHeader, refClientAPIRequestHeader);

				-- [03-Jul-2020]: Message security (Checksum / Hashing & Encryption)
				CALL secureWSRequest(refAPIRequest, refClientAPIRequest, refAPIRequestHeader, refClientAPIRequestHeader, refClientWSSOAPHeader);

			END IF;
			

			-- [05-Apr-2020]: Inject HTTP headers for traceablilty in APIC.
			DECLARE refAPIMessageTransportHeader REFERENCE TO OutputRoot.HTTPRequestHeader;
			CALL injectReferenceDataTransportHeaders('eCollection', ApplicationLabel, 
						refAPIRequest, refAPIMessageTransportHeader);

				
			-- [06-May-2020]: REST XML and SOAP Web Services.
			IF CLIENT_API_TYPE = API_TYPE_REST_JSON OR
				CLIENT_API_TYPE = API_TYPE_REST_XML THEN
				
				-- Return client API request.
				PROPAGATE TO TERMINAL SUCCESS_TERMINAL_REST;
			ELSE
				-- Return client API request.
				PROPAGATE TO TERMINAL SUCCESS_TERMINAL_WS;
			END IF;
			
			RETURN FALSE;
		END IF;

	END;

	-- Perform business data validation.
	CREATE FUNCTION performBusinessDataValidation(IN refAPIRequest REFERENCE, INOUT refAPIValidationReport REFERENCE) BEGIN
		-- Validate default / common fields.
		-- [12-Feb-2020] IF condition removed. Lets validate anyway.
		-- IF OPTIMIZE_FOR_UNIFIED_API THEN	
			CALL com.icici.xpress_connect.common.api.performDefaultRequestBusinessDataValidation(refAPIRequest, refAPIValidationReport);
		-- END IF;	

		-- Validate rest of the message fields.
		-- @@IXC.AutoGenerateESQL
		CALL com.icici.xpress_connect.ecollection.intimation.gen.performBusinessDataValidation(refAPIRequest, refAPIValidationReport);
	END;

	-- [20-Jun-2020]: Build Web Services SOAP Header.
	CREATE PROCEDURE secureWSRequestAuthenticate(IN refAPIRequest REFERENCE, 
												INOUT refClientAPIRequest REFERENCE,
												INOUT refClientWSSOAPHeader REFERENCE, 
												IN refAPIRequestHeader REFERENCE, 
												INOUT refClientAPIRequestHeader REFERENCE) 
	BEGIN
		IF CLIENT_API_AUTH_TYPE <> '' THEN
			IF CLIENT_API_AUTH_TYPE = API_AUTH_TYPE_WSSE_BASIC_AUTH THEN
				CREATE FIELD Environment.Variables.eCollection.MessageSecurity.WSRequestAuthenticate;
				DECLARE refMessageSecurityConfiguration REFERENCE TO Environment.Variables.eCollection.MessageSecurity.WSRequestAuthenticate;
				
				SET refMessageSecurityConfiguration.CLIENT_API_AUTH_IDENTITY_TOKEN = CLIENT_API_AUTH_IDENTITY_TOKEN;
				SET refMessageSecurityConfiguration.CLIENT_API_MESSAGE_SECURITY_HASHING_ALGO = CLIENT_API_MESSAGE_SECURITY_HASHING_ALGO;
				SET refMessageSecurityConfiguration.CLIENT_API_AUTH_IDENTITY_PWD = CLIENT_API_AUTH_IDENTITY_PWD;
				
				CALL com.icici.xpress_connect.common.api.secureWSRequestAuthenticate_BasicAuthenticationUserNameToken(refAPIRequest, refClientAPIRequest, 
							refClientWSSOAPHeader, refAPIRequestHeader, refClientAPIRequestHeader, refMessageSecurityConfiguration);
							
			ELSE 	-- To plug in WSSE or custom (client-specific) Authentication in SOAP Header.
            	CALL com.icici.xpress_connect.ecollection.intimation.gen.secureWSRequestAuthenticate(refAPIRequest, refAPIRequestHeader, refClientWSSOAPHeader);
			END IF;
		END IF;	
	END;
	

	-- [03-Jul-2020]: Message security (Checksum / Hashing & Encryption)
	CREATE FUNCTION secureAPIRequest(IN refAPIRequest REFERENCE, INOUT refClientAPIRequest REFERENCE, 
																		  IN refAPIRequestHeader REFERENCE, INOUT refClientAPIRequestHeader REFERENCE)
	BEGIN
		IF CLIENT_API_MESSAGE_SECURITY_INDICATOR THEN
			CREATE FIELD Environment.Variables.eCollection.MessageSecurity;
			DECLARE refMessageSecurityConfiguration REFERENCE TO Environment.Variables.eCollection.MessageSecurity;

			CALL buildSecurityConfiguration(refMessageSecurityConfiguration);
			
			-- To plug in custom security.
			CALL com.icici.xpress_connect.ecollection.intimation.gen.secureAPIRequest(refAPIRequest, 
						refClientAPIRequest, refAPIRequestHeader, refClientAPIRequestHeader, refMessageSecurityConfiguration);
		END IF;
	END;

	-- [03-Jul-2020]: Message security (Checksum / Hashing & Encryption)
	CREATE FUNCTION secureWSRequest(IN refAPIRequest REFERENCE, INOUT refClientAPIRequest REFERENCE,  
																		  	IN refAPIRequestHeader REFERENCE, INOUT refClientAPIRequestHeader REFERENCE,
																		  	INOUT refClientWSSOAPHeader REFERENCE)
	BEGIN
		IF CLIENT_API_MESSAGE_SECURITY_INDICATOR THEN
				CREATE FIELD Environment.Variables.eCollection.MessageSecurity;
				DECLARE refMessageSecurityConfiguration REFERENCE TO Environment.Variables.eCollection.MessageSecurity;
					
			IF CLIENT_API_MESSAGE_SECURITY_HASHING_TYPE  = MESSAGE_SECURITY_TYPE_XML_SIGNATURE THEN
				CALL buildSecurityConfiguration_XMLSignature(refMessageSecurityConfiguration);

				CALL com.icici.xpress_connect.common.api.secureWSRequest_XMLSignature20(refAPIRequest, refClientAPIRequest,
							refAPIRequestHeader, refClientAPIRequestHeader, refClientWSSOAPHeader, refMessageSecurityConfiguration);
											
			ELSE 	-- To plug in custom security.
				CALL buildSecurityConfiguration(refMessageSecurityConfiguration);
            	CALL com.icici.xpress_connect.ecollection.intimation.gen.secureWSRequest(refAPIRequest, refClientAPIRequest, 
            				refAPIRequestHeader, refClientAPIRequestHeader, refClientWSSOAPHeader, refMessageSecurityConfiguration);
			END IF;
		END IF;			
	END;

	-- Map / Build API request body (data / payload).
	-- [15-Apr-2020]: Introduced for injecting client HTTP headers.
	CREATE FUNCTION mapAPIRequest(IN refAPIRequest REFERENCE, INOUT refClientAPIRequest REFERENCE, 
																		  IN refAPIRequestHeader REFERENCE, INOUT refClientAPIRequestHeader REFERENCE)
	BEGIN
		IF OPTIMIZE_FOR_UNIFIED_API THEN
			CALL com.icici.xpress_connect.common.api.defaultMapAPIRequest(refAPIRequest, refClientAPIRequest);
			SET refClientAPIRequest.*[] = refAPIRequest.*[];
		ELSE	
			-- Uses API field map on Customer On-Boarding Portal to produce ESQL code.
			-- @@IXC.AutoGenerateESQL
			-- [15-Apr-2020]: Introduced for injecting client HTTP headers.
			CALL com.icici.xpress_connect.ecollection.intimation.gen.mapAPIRequest(refAPIRequest, refClientAPIRequest, 
																																					refAPIRequestHeader, refClientAPIRequestHeader);

			-- TODO: If you wish to collect data for reporting, this is the place where you would want to do it.	
			-- You might also want to delegate to the XCreateClientAPIRequest ESQL to collect client message data.

		END IF;

	END;

	-- [24-Jan-2020]: Initialize the Redelivery Configuration for downstream PrepareAPIRequest to take appropriate decisions.	
	-- TODO: Can this be moved to CommonAPIRedeliverySupport ESQL module ? 
	-- Roadblock: Access to User Defined Properties (including promoted ones) in the common library modules.
	CREATE FUNCTION buildRedeliveryConfiguration()
	BEGIN
		-- IXC_REDELIVERY_ENDPOINT_URI
		SET Environment.Variables.eCollection.HostEndpointURI 	= InputLocalEnvironment.REST.Input.URI;
		SET Environment.Variables.eCollection.APIRequestContentType = InputRoot.HTTPInputHeader."Content-Type";
		
		SET Environment.Variables.eCollection.APISubscriptionClientCode = API_SUBSCRIPTION_CLIENT_CODE;
		SET Environment.Variables.eCollection.ApplicationVersionTag = APPLICATION_VERSION_TAG;
		
		CREATE FIELD Environment.Variables.eCollection.Redelivery;
		DECLARE refRedeliveryParameters REFERENCE TO Environment.Variables.eCollection.Redelivery;
		
		-- [08-Jun-2020]: Introduced the use of Policy files for properties.
		IF COALESCE(REDELIVERY_POLICY_NAMESPACE, '') <> '' AND 
			 COALESCE(REDELIVERY_POLICY_NAME, '') <> ''  THEN 
			DECLARE REDELIVERY_POLICY_FILE CHARACTER '{' || REDELIVERY_POLICY_NAMESPACE || '}:' || REDELIVERY_POLICY_NAME;
	
			SET refRedeliveryParameters.RedeliveryRuleName =  
					com.icici.xpress_connect.common.api.getPolicyProperty(REDELIVERY_POLICY_FILE, 'REDELIVERY_RULE_NAME');
			SET refRedeliveryParameters.RedeliveryInterval =  
					com.icici.xpress_connect.common.api.getPolicyProperty(REDELIVERY_POLICY_FILE, 'REDELIVERY_INTERVAL');
			SET refRedeliveryParameters.MaximumRedeliveryAttemptCount =  
					com.icici.xpress_connect.common.api.getPolicyProperty(REDELIVERY_POLICY_FILE, 'REDELIVERY_COUNT_MAX');
			 SET refRedeliveryParameters.RedeliveryBlockStartTime =  
			 		com.icici.xpress_connect.common.api.getPolicyProperty(REDELIVERY_POLICY_FILE, 'REDELIVERY_BLOCK_START_TIME');
			SET refRedeliveryParameters.RedeliveryBlockEndTime =  
			      	com.icici.xpress_connect.common.api.getPolicyProperty(REDELIVERY_POLICY_FILE, 'REDELIVERY_BLOCK_END_TIME');
			SET refRedeliveryParameters.FallbackRedeliveryRuleName =  
					com.icici.xpress_connect.common.api.getPolicyProperty(REDELIVERY_POLICY_FILE, 'FALLBACK_REDELIVERY_RULE_NAME');
		ELSE
			SET refRedeliveryParameters.RedeliveryRuleName 							= REDELIVERY_RULE_NAME;
			SET refRedeliveryParameters.RedeliveryInterval 								= REDELIVERY_INTERVAL;
			SET refRedeliveryParameters.MaximumRedeliveryAttemptCount 	= REDELIVERY_COUNT_MAX;
			SET refRedeliveryParameters.RedeliveryBlockStartTime 					= REDELIVERY_BLOCK_START_TIME;
			SET refRedeliveryParameters.RedeliveryBlockEndTime 					= REDELIVERY_BLOCK_END_TIME;
			SET refRedeliveryParameters.FallbackRedeliveryRuleName 			= FALLBACK_REDELIVERY_RULE_NAME; -- [20200508]
		END IF;

		SET refRedeliveryParameters.UserAgent = COALESCE(InputRoot.HTTPInputHeader.{IXC_USER_AGENT}, 'NA'); 			-- [14-Feb-2020]
	END;
	

	-- [15-Feb-2020]: Validation specific to API spec downgrade.
	-- 4 field modified to suit Profunds limitations.
	-- request_priority, original_request_priority, resent_indicator, test_indicator.
	-- Data-Types of these fields were modified to string.
	CREATE FUNCTION performBaseAPIRequestValidation_Downgrade(INOUT refAPIRequest REFERENCE,
	INOUT refAPIValidationReport REFERENCE)
	BEGIN
		DECLARE EXIT HANDLER FOR  SQLSTATE LIKE '%'  
		BEGIN
			-- Jumping hoops to send a consistent response. Consequences of the API downgrade.
			DECLARE API_DUMMY_VALUE_API_ORIGINAL_REQUEST_ID CONSTANT CHARACTER '00000000-0000-0000-0000-000000000000';
			DECLARE API_DUMMY_VALUE_API_ORIGINAL_REQUEST_DATETIME CONSTANT CHARACTER '1970-01-01T00:00:00.000+00:00'; 	-- Unix Epoc.

			SET refAPIRequest.request_priority = NULL;
			SET refAPIRequest.original_request_priority = NULL;

			IF COALESCE(refAPIRequest.original_request_id, '') <> '' THEN
				SET refAPIRequest.resent_indicator = CAST(TRUE AS CHARACTER);
				SET refAPIRequest.original_request_id = COALESCE(refAPIRequest.original_request_id, API_DUMMY_VALUE_API_ORIGINAL_REQUEST_ID);
				SET refAPIRequest.original_request_datetime = COALESCE(refAPIRequest.original_request_datetime, API_DUMMY_VALUE_API_ORIGINAL_REQUEST_DATETIME);
			ELSE
				SET refAPIRequest.resent_indicator = CAST(FALSE AS CHARACTER);
				CALL com.icici.xpress_connect.common.api.unsetResentMessageFields(refAPIRequest);
			END IF;
			SET refAPIRequest.test_indicator = NULL;
			
			-- We have corrected a few field values so that the API response from Xpress Connect does not fail validation at the client (e.g. Profund) end.
			SET Environment.Variables.eCollection.API.Request.Message = refAPIRequest;
			
			-- Rethrow Parsing Error.
			RESIGNAL;
		END;

		-- Typecasting the downgraded fields to pre-empt bad values.
		IF CAST(COALESCE(refAPIRequest.request_priority, '-1') AS INTEGER) <> -1 THEN
			-- If priority is set to value other than -1, it implies that the client application has set a value explicitly.
			SET refAPIRequest.request_priority = CAST (refAPIRequest.request_priority AS CHARACTER);
		END IF;
		-- Typecasting the downgraded fields to pre-empt bad values.
		IF CAST(COALESCE(refAPIRequest.original_request_priority, '-1') AS INTEGER) <> -1 THEN
			-- If priority is set to value other than -1, it implies that the client application has set a value explicitly.
			SET refAPIRequest.original_request_priority = CAST (refAPIRequest.original_request_priority AS CHARACTER);
		END IF;
	
		IF LENGTH(CAST(refAPIRequest.resent_indicator AS CHARACTER)) > 0 THEN
			-- The field has some value, so lets validate if its a boolean one.
			SET refAPIRequest.resent_indicator = CAST(CAST(refAPIRequest.resent_indicator AS BOOLEAN) AS CHARACTER);
		END IF;	
					
		IF LENGTH(CAST(refAPIRequest.test_indicator AS CHARACTER)) > 0 THEN
			-- The field has some value, so lets validate if its a boolean one.
			SET refAPIRequest.test_indicator = CAST(CAST(refAPIRequest.test_indicator AS BOOLEAN) AS CHARACTER);
		END IF;	
	END;

	-- [05-Apr-2020]: APIC request tracing. 
	-- This method is also present com.icici.xpress_connect.common.api.CommonAPIMessageBuilder.esql. Here its a bit concised.
	CREATE FUNCTION injectReferenceDataTransportHeaders(IN ApplicationLabel CHARACTER, IN MessageFlowLabel CHARACTER,
					 IN refAPIMessage REFERENCE, INOUT refAPIMessageHeader REFERENCE) 
	BEGIN
		
		-- End-to-end traceability.
		-- refAPIMessageHeader will reference User ("usr" folder).
--		SET refAPIMessageHeader."IXC_Initiating_Application" 					= ApplicationLabel;
--		SET refAPIMessageHeader."IXC_Initiating_Business_Scenario" 		= MessageFlowLabel;
		SET refAPIMessageHeader."IXC_Initiating_Application_Channel_Id" 
																																= COALESCE(refAPIMessage.sender_system_id, 
																																		refAPIMessage.channel_id);
		SET refAPIMessageHeader."IXC_Initiating_Request_Id" 					= refAPIMessage.request_id;
		SET refAPIMessageHeader."IXC_Initiating_Request_Datetime" 		= refAPIMessage.request_datetime;
--		SET refAPIMessageHeader."IXC_Request_Priority" 							= CAST(COALESCE(refAPIMessage.request_priority, '3') AS INTEGER);
		SET refAPIMessageHeader."IXC_Initiating_Original_Request_Id"	= refAPIMessage.original_request_id;
		SET refAPIMessageHeader."IXC_Initiating_Original_Request_Datetime" 
																																= refAPIMessage.original_request_datetime;
--		SET refAPIMessageHeader."IXC_Original_Request_Priority" 			= CAST(COALESCE(refAPIMessage.original_request_priority, '3') AS INTEGER);
		SET refAPIMessageHeader."IXC_Initiating_Test_Indicator" 				= CAST(COALESCE(refAPIMessage.test_indicator, 'FALSE') AS BOOLEAN);
		SET refAPIMessageHeader."IXC_Client_Code" 									= refAPIMessage.client_code;
--		SET refAPIMessageHeader."IXC_Virtual_Account_Number" 			= refAPIMessage.virtual_account_number;
--		SET refAPIMessageHeader."IXC_Transaction_Amount" 					= CAST(refAPIMessage.transaction_amount AS CHARACTER);
--		SET refAPIMessageHeader."IXC_Currency_Code" 								= refAPIMessage.currency_code;
--		SET refAPIMessageHeader."IXC_Payment_Mode" 								= refAPIMessage.payment_mode;
--		SET refAPIMessageHeader."IXC_Transaction_Datetime" 					= refAPIMessage.transaction_datetime;
--		SET refAPIMessageHeader."IXC_Beneficiary_IFSC_Code" 				= refAPIMessage.sender_ifsc_code;
		
	END;
	
	-- [06-May-2020]: REST XML and SOAP Web Services.	
	CREATE FUNCTION  addHTTPResponseHeaders() 
	BEGIN
		SET OutputRoot.Properties.ContentType = COALESCE(InputRoot.HTTPInputHeader."Content-Type",  CONTENT_TYPE_MIME_JSON);
		SET OutputRoot.Properties.Encoding = InputRoot.Properties.Encoding;
		SET OutputRoot.Properties.CodedCharSetId = InputRoot.Properties.CodedCharSetId;
		
		SET OutputRoot.HTTPRequestHeader."Content-Type" 			= COALESCE(InputRoot.HTTPInputHeader."Content-Type",  CONTENT_TYPE_MIME_JSON);
		SET OutputRoot.HTTPRequestHeader."Content-Encoding" 	= InputRoot.HTTPInputHeader."Content-Encoding";
		
	END;

	-- [06-May-2020]: REST XML and SOAP Web Services.
	CREATE FUNCTION  addHTTPClientRequestHeaders() 
	BEGIN
		-- Content-Type depends upon the target (Client) service.
		DECLARE chClientAPIRequestContentType CHARACTER getClientAPIRequestContentType(CLIENT_API_TYPE);
		
		SET OutputRoot.Properties.ContentType = chClientAPIRequestContentType;
		SET OutputRoot.Properties.Encoding = InputRoot.Properties.Encoding;
		SET OutputRoot.Properties.CodedCharSetId = InputRoot.Properties.CodedCharSetId;

		-- HTTP Headers depend upon the target (Client) service.
		SET OutputRoot.HTTPRequestHeader."Content-Type" 			= chClientAPIRequestContentType;
		SET OutputRoot.HTTPRequestHeader."Content-Encoding" 	= InputRoot.HTTPInputHeader."Content-Encoding";
		SET OutputRoot.HTTPRequestHeader."Accept" 						= chClientAPIRequestContentType;
		-- Facilitates testing through mock without requiring to switch between transformation functions.
		SET OutputRoot.HTTPRequestHeader."IXC-Client-API-Type" 	= CLIENT_API_TYPE;
		
		IF COALESCE(CLIENT_API_AUTH_TYPE, '') = API_AUTH_TYPE_BASIC_AUTH OR
			COALESCE(CLIENT_API_AUTH_TYPE, '') = API_AUTH_TYPE_WSSE_BASIC_AUTH THEN
			CALL addHTTPBasicAuthenticationHeaders();
		END IF;		

	END;

	-- [01-Jun-2020]: API -SECURITY: Basic Authentication for REST API and SOAP Web Services.
	-- https://www.ibm.com/support/knowledgecenter/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bp28500_.html
	-- https://www.ibm.com/support/pages/ace-11-how-set-basic-authentication-header-httprequest-or-soaprequest-node-using-security-identity
	CREATE FUNCTION  addHTTPBasicAuthenticationHeaders() 
	BEGIN
		-- Basic Authentication
		-- SET OutputRoot.HTTPRequestHeader."Authorization" 			= 'Basic ' || BASE64ENCODE(apiUserName || ':' || apiPassword);

		IF COALESCE(CLIENT_API_AUTH_POLICY_NAMESPACE, '') = '' AND 
			COALESCE(CLIENT_API_AUTH_POLICY_NAME, '') = '' THEN
			SET OutputRoot.Properties.IdentitySourceType 			= 'usernameAndPassword';
			SET OutputRoot.Properties.IdentitySourceToken 		= CLIENT_API_AUTH_IDENTITY_TOKEN;
			SET OutputRoot.Properties.IdentitySourcePassword 	= CLIENT_API_AUTH_IDENTITY_PWD;

			IF COALESCE(CLIENT_API_AUTH_DOMAIN, '') <> '' THEN
				SET OutputRoot.Properties.IdentitySourceIssuedBy = CLIENT_API_AUTH_DOMAIN;
			END IF;
		END IF;
	END;

	-- [01-Jun-2020]: API -SECURITY: WSSE SOAP Web Services.
	CREATE FUNCTION  addWSSEHeaders(IN apiUserName CHARACTER, IN apiPassword CHARACTER) 
	BEGIN
		-- Basic Authentication
		--	SET OutputRoot.HTTPRequestHeader."Authorization" 			= 'Basic ' || BASE64ENCODE(apiUserName || ':' || apiPassword);
	END;
	
	-- [06-May-2020]: REST XML and SOAP Web Services.
	CREATE FUNCTION getClientAPIRequestContentType(IN clientAPIType CHARACTER) RETURNS CHARACTER
	BEGIN
		IF clientAPIType = API_TYPE_REST_JSON THEN
			RETURN CONTENT_TYPE_MIME_JSON;
		ELSEIF clientAPIType = API_TYPE_REST_XML THEN
			RETURN CONTENT_TYPE_MIME_XML;
		ELSEIF clientAPIType = API_TYPE_WS_SOAP_V11 THEN
			RETURN CONTENT_TYPE_MIME_SOAP_1_1;
		ELSEIF clientAPIType = API_TYPE_WS_SOAP_V12 THEN
			RETURN CONTENT_TYPE_MIME_SOAP_1_2;
		END IF;
		
		RETURN NULL;
	END;
	
	-- [06-May-2020]: REST XML and SOAP Web Services.
	-- Refer https://www.ibm.com/support/knowledgecenter/SSMKHH_10.0.0/com.ibm.etools.mft.doc/ac64020_.html
	CREATE FUNCTION  initWebServiceContext() 
	BEGIN
			-- The WSDL operation name. In Gateway mode, the operation is assumed to be the name of the 
			-- element that is the first child of the SOAP Body element, if present, otherwise it is the constant 
			-- name ‘ComIbmBrokerGenericGatewayOperation’.
			-- This should be automatically set by the SOAP Request node configured as Gateway.
			-- SET OutputRoot.SOAP.Context.operation  = WS_SOAP_CTX_OPERATION_NAME;
			
			-- The WSDL port type name. In Gateway mode, this item is empty.
			-- SET OutputRoot.SOAP.Context.portType  = WS_SOAP_CTX_PORT_TYPE;
			
			-- The WSDL port name (if known). In Gateway mode, this item is empty.
			-- SET OutputRoot.SOAP.Context.port  = WS_SOAP_CTX_PORT_NAME;
			
			-- The WSDL service name (if known). In Gateway mode, the service has the constant name 
			-- ‘ComIbmBrokerGenericGatewayService’. 
			-- This should be automatically set by the SOAP Request node configured as Gateway.
			-- SET OutputRoot.SOAP.Context.service = WS_SOAP_CTX_SERVICE_NAME;

			-- One of ‘REQUEST_RESPONSE’, ‘ONE_WAY’, ‘SOLICIT_RESPONSE’, ‘NOTIFICATION’. In Gateway mode, 
			-- without WSDL, this field contains ‘GATEWAY’. This means ‘REQUEST_RESPONSE’ or ‘GATEWAY_ONE_WAY’, 
			-- which means that the node has detected the operation type to be one-way.
			-- This should be automatically set by the SOAP Request node configured as Gateway.
			-- SET OutputRoot.SOAP.Context.operationType  = 'GATEWAY';
			
			-- One of  '1.1' or  '1.2'.
			IF CLIENT_API_TYPE = API_TYPE_WS_SOAP_V12 THEN
				SET OutputRoot.SOAP.Context.SOAP_Version  = '1.2';
				-- SOAPAction HTTP header is not required for SOAP 1.2
			ELSEIF CLIENT_API_TYPE = API_TYPE_WS_SOAP_V11 THEN
				SET OutputRoot.SOAP.Context.SOAP_Version  = '1.1';
				SET OutputRoot.HTTPRequestHeader.SOAPAction = WS_SOAP_HTTP_HDR_SOAPACTION;
			END IF;
			
			--	Contains nameValue child elements that define the namespace prefix (the name) to be used for a specified 
			-- namespace URI (the value). An output message uses the namespace prefixes defined here to qualify any 
			-- elements in the corresponding namespaces.
			--	
			--	If the SOAP.Context was originally created at an input node, it might already contain all the namespace 
			-- prefix definitions that you need.
			--	
			--	If SOAP.Context does not exist, or the outgoing message uses additional namespaces, the SOAP parser 
			-- generates any required namespace prefixes automatically.
			--	
			--	Alternatively, you can specify your own namespace prefix; the specific name of a namespace prefix does not 
			-- usually affect the meaning of a message, with one important exception. If the message content contains a 
			-- qualified name, the message must contain a matching namespace prefix definition.
			
			-- Example: SET OutputRoot.SOAP.Context.Namespace.(SOAP.NamespaceDecl)xmlns:tns='http://www.icicibank.com/api/acme';
			
			-- SET OutputRoot.SOAP.Context.Namespace.(SOAP.NamespaceDecl)xmlns:{WS_SOAP_CTX_NAMESPACE_PREFIX} = WS_SOAP_CTX_XML_DECLARATION;
			
			IF CLIENT_API_TYPE = API_TYPE_WS_SOAP_V12 THEN
					SET OutputRoot.SOAP.Context.Namespace.(SOAP.NamespaceDecl)xmlns:soap12= NS_SOAP_V12;
			ELSEIF CLIENT_API_TYPE = API_TYPE_WS_SOAP_V11 THEN
					SET OutputRoot.SOAP.Context.Namespace.(SOAP.NamespaceDecl)xmlns:soap11 = NS_SOAP_V11;
			END IF;
			
			--  Represents the standard XML declaration.
			-- SET OutputRoot.SOAP.Context.XmlDeclaration  = WS_SOAP_CTX_XML_DECLARATION;
			
	END;
	
	CREATE FUNCTION inkTransaction(IN refMessage REFERENCE, IN refMessageHeader REFERENCE) 
	BEGIN
			SET Environment.TransactionMarker.client_code 								=  COALESCE(refMessage.client_code, '');
			SET Environment.TransactionMarker.client_organization_id 			= COALESCE(CLIENT_ORGANIZATION_ID, '');
			SET Environment.TransactionMarker.client_organization_name 	= COALESCE(CLIENT_ORGANIZATION_NAME, '');
			SET Environment.TransactionMarker.client_api_type 	= COALESCE(CLIENT_API_TYPE, '');
			
			DECLARE chTestIndicator BOOLEAN CAST(COALESCE(getSingleHttpHeaderValue(refMessageHeader, IXC_API_TEST_INDICATOR), 'false') AS BOOLEAN);
			
			IF chTestIndicator THEN
				SET Environment.TransactionMarker.DevOps.test_indicator 			= TRUE;
				SET Environment.TransactionMarker.DevOps.test_run_id 				= COALESCE(getSingleHttpHeaderValue(refMessageHeader, IXC_API_TEST_RUN_ID), '');
				SET Environment.TransactionMarker.DevOps.test_sample_id 			= COALESCE(getSingleHttpHeaderValue(refMessageHeader, IXC_API_TEST_SAMPLE_ID), '');
			END IF;
			
	END;
	
	
	CREATE FUNCTION buildSecurityConfiguration(INOUT refMessageSecurityConfiguration REFERENCE)
	BEGIN
				SET refMessageSecurityConfiguration.CodedCharSetId = InputRoot.Properties.CodedCharSetId;
				SET refMessageSecurityConfiguration.Encoding = InputRoot.Properties.Encoding;
	
				SET refMessageSecurityConfiguration.Namespaces = '';
				SET refMessageSecurityConfiguration.KEY_ID = API_SUBSCRIPTION_CLIENT_CODE;
	
				CALL buildSecurityConfiguration_KeyStore(refMessageSecurityConfiguration);
				SET refMessageSecurityConfiguration.CLIENT_API_MESSAGE_SECURITY_RESPONSE_CHECK = CLIENT_API_MESSAGE_SECURITY_RESPONSE_CHECK;
	
				SET refMessageSecurityConfiguration.CLIENT_API_MESSAGE_SECURITY_HASHING_TYPE = CLIENT_API_MESSAGE_SECURITY_HASHING_TYPE;
				SET refMessageSecurityConfiguration.CLIENT_API_MESSAGE_SECURITY_ENCRYPTION_TYPE = CLIENT_API_MESSAGE_SECURITY_ENCRYPTION_TYPE;
	
				SET refMessageSecurityConfiguration.CLIENT_API_MESSAGE_SECURITY_HASHING_ALGO = CLIENT_API_MESSAGE_SECURITY_HASHING_ALGO;
				SET refMessageSecurityConfiguration.CLIENT_API_MESSAGE_SECURITY_ENCRYPTION_ALGO = CLIENT_API_MESSAGE_SECURITY_ENCRYPTION_ALGO;
                SET refMessageSecurityConfiguration.CLIENT_API_MESSAGE_SECURITY_XMLDSIG_CANONICALIZATION = CLIENT_API_MESSAGE_SECURITY_XMLDSIG_CANONICALIZATION;	            
  
				SET refMessageSecurityConfiguration.CLIENT_API_MESSAGE_SECURITY_ENCRYPTION_ALGO_MODE		
								= CLIENT_API_MESSAGE_SECURITY_ENCRYPTION_ALGO_MODE;
				SET refMessageSecurityConfiguration.CLIENT_API_MESSAGE_SECURITY_ENCRYPTION_ALGO_PADDING 						
								= CLIENT_API_MESSAGE_SECURITY_ENCRYPTION_ALGO_PADDING;
				SET refMessageSecurityConfiguration.CLIENT_API_MESSAGE_SECURITY_ENCRYPTION_ALGO_CUSTOM_PADDING 	
								= CLIENT_API_MESSAGE_SECURITY_ENCRYPTION_ALGO_CUSTOM_PADDING;
				SET refMessageSecurityConfiguration.CLIENT_API_MESSAGE_SECURITY_ENCRYPTION_SECRET_KEYGEN 						
								= CLIENT_API_MESSAGE_SECURITY_ENCRYPTION_SECRET_KEYGEN;
				SET refMessageSecurityConfiguration.CLIENT_API_MESSAGE_SECURITY_ENCRYPTION_SECRET_KEYSIZE 						
								= CLIENT_API_MESSAGE_SECURITY_ENCRYPTION_SECRET_KEYSIZE;
				SET refMessageSecurityConfiguration.CLIENT_API_MESSAGE_SECURITY_ENCRYPTION_ENCODING 								
								= LOWER(CLIENT_API_MESSAGE_SECURITY_ENCRYPTION_ENCODING);
				SET refMessageSecurityConfiguration.CLIENT_API_MESSAGE_SECURITY_SECRETKEY_ENCRYPTION_ALGO 								
								= CLIENT_API_MESSAGE_SECURITY_SECRETKEY_ENCRYPTION_ALGO;
				SET refMessageSecurityConfiguration.CLIENT_API_MESSAGE_SECURITY_SECRETKEY_ENCRYPTION_ALGO_MODE 					
								= CLIENT_API_MESSAGE_SECURITY_SECRETKEY_ENCRYPTION_ALGO_MODE;
				SET refMessageSecurityConfiguration.CLIENT_API_MESSAGE_SECURITY_SECRETKEY_ENCRYPTION_ALGO_PADDING 			
								= CLIENT_API_MESSAGE_SECURITY_SECRETKEY_ENCRYPTION_ALGO_PADDING;
				SET refMessageSecurityConfiguration.CLIENT_API_MESSAGE_SECURITY_SECRETKEY_ENCRYPTION_ALGO_CUSTOM_PADDING 
								= CLIENT_API_MESSAGE_SECURITY_SECRETKEY_ENCRYPTION_ALGO_CUSTOM_PADDING;
	
				CALL buildSecurityConfiguration_KeyStore_KeyEncryption(refMessageSecurityConfiguration);
	
	END;
	
	CREATE FUNCTION buildSecurityConfiguration_XMLSignature(INOUT refMessageSecurityConfiguration REFERENCE)
	BEGIN
				SET refMessageSecurityConfiguration.CodedCharSetId = InputRoot.Properties.CodedCharSetId;
				SET refMessageSecurityConfiguration.Encoding = InputRoot.Properties.Encoding;
				SET refMessageSecurityConfiguration.Namespaces = '';
				SET refMessageSecurityConfiguration.KEY_ID = API_SUBSCRIPTION_CLIENT_CODE;
	
				CALL buildSecurityConfiguration_KeyStore(refMessageSecurityConfiguration);
	
				SET refMessageSecurityConfiguration.CLIENT_API_MESSAGE_SECURITY_HASHING_ALGO = CLIENT_API_MESSAGE_SECURITY_HASHING_ALGO;
				SET refMessageSecurityConfiguration.CLIENT_API_MESSAGE_SECURITY_ENCRYPTION_ALGO = CLIENT_API_MESSAGE_SECURITY_ENCRYPTION_ALGO;
	
				SET refMessageSecurityConfiguration.CLIENT_API_MESSAGE_SECURITY_XMLDSIG_CANONICALIZATION = CLIENT_API_MESSAGE_SECURITY_XMLDSIG_CANONICALIZATION;
				SET refMessageSecurityConfiguration.CLIENT_API_MESSAGE_SECURITY_XMLDSIG_TRANSFORM = CLIENT_API_MESSAGE_SECURITY_XMLDSIG_TRANSFORM;
				SET refMessageSecurityConfiguration.CLIENT_API_MESSAGE_SECURITY_XMLDSIG_SELECTION = CLIENT_API_MESSAGE_SECURITY_XMLDSIG_SELECTION;
				SET refMessageSecurityConfiguration.CLIENT_API_MESSAGE_SECURITY_XMLDSIG_DIGEST = CLIENT_API_MESSAGE_SECURITY_XMLDSIG_DIGEST;
				SET refMessageSecurityConfiguration.CLIENT_API_MESSAGE_SECURITY_XMLDSIG_SIGNATURE = CLIENT_API_MESSAGE_SECURITY_XMLDSIG_SIGNATURE;
				
				SET refMessageSecurityConfiguration.CLIENT_API_REQUEST_NAMESPACE = CLIENT_API_REQUEST_NAMESPACE;				
				SET refMessageSecurityConfiguration.CLIENT_API_MESSAGE_REQUEST_ROOT = CLIENT_API_MESSAGE_REQUEST_ROOT;				
	END;
	
	CREATE FUNCTION buildSecurityConfiguration_KeyStore(INOUT refMessageSecurityConfiguration REFERENCE)
	BEGIN
				SET refMessageSecurityConfiguration.CLIENT_API_MESSAGE_SECURITY_KEYSTORE_TYPE = CLIENT_API_MESSAGE_SECURITY_KEYSTORE_TYPE;
				SET refMessageSecurityConfiguration.DEFAULT_MESSAGE_SECURITY_KEYSTORE_TYPE = DEFAULT_MESSAGE_SECURITY_KEYSTORE_TYPE;
				
				SET refMessageSecurityConfiguration.CLIENT_API_MESSAGE_SECURITY_KEYSTORE_NAME = CLIENT_API_MESSAGE_SECURITY_KEYSTORE_NAME;
				SET refMessageSecurityConfiguration.DEFAULT_MESSAGE_SECURITY_KEYSTORE_NAME = DEFAULT_MESSAGE_SECURITY_KEYSTORE_NAME;
				
				SET refMessageSecurityConfiguration.CLIENT_API_MESSAGE_SECURITY_KEYSTORE_PATH = CLIENT_API_MESSAGE_SECURITY_KEYSTORE_PATH;
				SET refMessageSecurityConfiguration.DEFAULT_MESSAGE_SECURITY_KEYSTORE_PATH = DEFAULT_MESSAGE_SECURITY_KEYSTORE_PATH;
				
				SET refMessageSecurityConfiguration.CLIENT_API_MESSAGE_SECURITY_KEYSTORE_PASSWORD = CLIENT_API_MESSAGE_SECURITY_KEYSTORE_PASSWORD;
				
				SET refMessageSecurityConfiguration.CLIENT_API_MESSAGE_SECURITY_PUBLIC_KEY_PASSWORD = CLIENT_API_MESSAGE_SECURITY_PUBLIC_KEY_PASSWORD;
				SET refMessageSecurityConfiguration.CLIENT_API_MESSAGE_SECURITY_PUBLIC_KEY_ALIAS_NAME = CLIENT_API_MESSAGE_SECURITY_PUBLIC_KEY_ALIAS_NAME;
				
				SET refMessageSecurityConfiguration.CLIENT_API_MESSAGE_SECURITY_PRIVATE_KEY_PASSWORD = CLIENT_API_MESSAGE_SECURITY_PRIVATE_KEY_PASSWORD;
				SET refMessageSecurityConfiguration.CLIENT_API_MESSAGE_SECURITY_PRIVATE_KEY_ALIAS_NAME = CLIENT_API_MESSAGE_SECURITY_PRIVATE_KEY_ALIAS_NAME;
	END;
	
	CREATE FUNCTION buildSecurityConfiguration_KeyStore_KeyEncryption(INOUT refMessageSecurityConfiguration REFERENCE)
	BEGIN
				SET refMessageSecurityConfiguration.CLIENT_API_MESSAGE_SECURITY_SECRET_KEYSTORE_TYPE 
							= CLIENT_API_MESSAGE_SECURITY_SECRET_KEYSTORE_TYPE;
				SET refMessageSecurityConfiguration.DEFAULT_MESSAGE_SECURITY_SECRET_KEYSTORE_TYPE 
							= DEFAULT_MESSAGE_SECURITY_KEYSTORE_TYPE;
				SET refMessageSecurityConfiguration.CLIENT_API_MESSAGE_SECURITY_SECRET_KEYSTORE_NAME 
							= CLIENT_API_MESSAGE_SECURITY_SECRET_KEYSTORE_NAME;
				SET refMessageSecurityConfiguration.DEFAULT_MESSAGE_SECURITY_SECRET_KEYSTORE_NAME 
							= DEFAULT_MESSAGE_SECURITY_KEYSTORE_NAME;
				SET refMessageSecurityConfiguration.CLIENT_API_MESSAGE_SECURITY_SECRET_KEYSTORE_PATH 
							= CLIENT_API_MESSAGE_SECURITY_SECRET_KEYSTORE_PATH;
				SET refMessageSecurityConfiguration.DEFAULT_MESSAGE_SECURITY_SECRET_KEYSTORE_PATH 
							= DEFAULT_MESSAGE_SECURITY_KEYSTORE_PATH;
				SET refMessageSecurityConfiguration.CLIENT_API_MESSAGE_SECURITY_SECRET_KEYSTORE_PASSWORD 
							= CLIENT_API_MESSAGE_SECURITY_SECRET_KEYSTORE_PASSWORD;
				SET refMessageSecurityConfiguration.CLIENT_API_MESSAGE_SECURITY_SECRET_KEY_PASSWORD 
							= CLIENT_API_MESSAGE_SECURITY_SECRET_KEY_PASSWORD;
				SET refMessageSecurityConfiguration.CLIENT_API_MESSAGE_SECURITY_SECRET_KEY_ALIAS_NAME 
							= CLIENT_API_MESSAGE_SECURITY_SECRET_KEY_ALIAS_NAME;
	END;
END MODULE;
